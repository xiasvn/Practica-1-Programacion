# -*- coding: utf-8 -*-
"""Practica 1 Revisada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F2QRnKOSeM3zNFHTp-K2LU5iZEEt990t
"""

# Este programa está diseñado para recibir una cadena S de caracteres '(' y ')'
# y determinar si la cadena S presenta una secuencia ordenada de parentesis.
# Es decir, que para cada parentesis de apertura '(' haya un parentesis que lo cierre ')'.
# De ser correcta la cadena, el programa nos devolverá el booleano True.
# En caso de ser incorrecta, nos devolverá False e indicará que la cadena debe ser revisada.

def checar_cadena(data):
    '''Función que genera una lista donde se guardan los paréntesis'''
    parentesis = ["(", ")"]
    # Generamos a c una lista para posteriormente utilizarla
    c = []
    # Recorremos los elementos de la cadena
    for i in data:
        # Si el elemento está en nuestra lista paréntesis es decir es igual a ( o ), entonces que lo agregue a c
        if i in parentesis:
            c.append(i)
    # Cuando acabe el for que me regrese lo que guardó la variable c
    return c

def revisar_cadena(data):
    '''Función que checa si la cadena está bien formada'''
    # Generamos a l una lista para posteriormente utilizarla
    l = []
    # Recorremos la cadena
    for x in data:
        # Si un elemento de nuestra cadena es igual a ( entonces la guardamos en l
        if x == '(':
            l.append(x)
        else:
            # Si no le decimos que si la lista está vacía nos regrese falso
            if len(l) == 0:
                return False
            else:
                # Si no está vacía le decimos que borre el último elemento de l
                l.pop()
    # Cuando acabe de recorrer la cadena si la longitud es 0 nos regresará true y cuando no esté vacía nos regresará false (esto por el not bool)
    return not bool(len(l))

def main():
    '''Función que nos regresa el booleano y el mensaje'''
    # Pedir cadena de paréntesis
    cadena = str(input("Ingresa una cadena de paréntesis: "))
    # Guardamos el resultado de la función checar_cadena en una variable para posteriormente usarla
    check = checar_cadena(cadena)
    # Guardamos el resultado de la función revisar_cadena en una variable para posteriormente usarla
    d = revisar_cadena(check)
    print(d)
    if d:
        print("Tu cadena es correcta")
    else:
        print("Revisa tu cadena")

if __name__ == "__main__":
    main()